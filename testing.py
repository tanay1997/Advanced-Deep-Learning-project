# -*- coding: utf-8 -*-
"""Testing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iZGmZG_mF-5ZU7iR44iqsAga0BinH03e
"""

from google.colab import drive
drive.mount('/content/drive')

from keras.models import load_model

import os
import cv2
import numpy
import imageio
from sklearn.metrics import confusion_matrix
from keras.models import Sequential
from keras.layers.core import Dense, Dropout, Activation, Flatten
from keras.layers.convolutional import Convolution3D, MaxPooling3D
from keras.optimizers import SGD, RMSprop
from keras.callbacks import ModelCheckpoint
from keras.utils import np_utils, generic_utils
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix
from sklearn import preprocessing
from keras import backend as K
import sys

image_rows, image_columns, image_depth = 64, 64, 18

hist = load_model('/content/drive/My Drive/Research project/Pre-trained_model.h5')

testing_list = []
painpath = '/content/drive/My Drive/TestingData/pain'
Nopainpath = '/content/drive/My Drive/TestingData/Nopain'

for video in os.listdir(painpath):
  videopath = os.path.join(painpath, video)
  frames = []
  for image_path in os.listdir(videopath):
        input_path = os.path.join(videopath, image_path)
        image = cv2.imread(input_path)
        imageresize = cv2.resize(image, (image_rows, image_columns), interpolation = cv2.INTER_AREA)
        grayimage = cv2.cvtColor(imageresize, cv2.COLOR_BGR2GRAY)
        frames.append(grayimage)
  frames = numpy.asarray(frames)
  videoarray = numpy.rollaxis(numpy.rollaxis(frames, 2, 0), 2, 0)
  testing_list.append(videoarray)

n1 = len(testing_list)

for video in os.listdir(Nopainpath):
  videopath = os.path.join(Nopainpath, video)
  frames = []
  for image_path in os.listdir(videopath):
        input_path = os.path.join(videopath, image_path)
        image = cv2.imread(input_path)
        imageresize = cv2.resize(image, (image_rows, image_columns), interpolation = cv2.INTER_AREA)
        grayimage = cv2.cvtColor(imageresize, cv2.COLOR_BGR2GRAY)
        frames.append(grayimage)
  frames = numpy.asarray(frames)
  videoarray = numpy.rollaxis(numpy.rollaxis(frames, 2, 0), 2, 0)
  testing_list.append(videoarray)

n2 = len(testing_list)

testing_list = numpy.asarray(testing_list)
testingsamples = len(testing_list)
testinglabels = numpy.zeros((testingsamples, ), dtype = int)

testinglabels[0:n1] = 0
testinglabels[n1:n2] = 1

testinglabels = np_utils.to_categorical(testinglabels, 2)

testing_data = [testing_list, testinglabels]
(testingframes, testinglabels) = (testing_data[0], testing_data[1])
testing_set = numpy.zeros((testingsamples, 1, image_rows, image_columns, image_depth))

testing_set.shape

for h in range(testingsamples):
    testing_set[h][0][:][:][:] = testingframes[h, :, :, :]

testing_set = testing_set.astype('float32')
testing_set -= numpy.mean(testing_set)
testing_set /= numpy.max(testing_set)

predictions = hist.predict(testing_set)
predictions_labels = numpy.argmax(predictions, axis=1)

testinglabels = numpy.argmax(testinglabels, axis=1)

cfm = confusion_matrix(testinglabels, predictions_labels)
print (cfm)